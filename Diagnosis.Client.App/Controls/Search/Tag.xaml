<UserControl x:Class="Diagnosis.Client.App.Controls.Search.Tag"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:controls="clr-namespace:Diagnosis.Client.App.Controls"
             xmlns:diag="http://schemas.smg.com/diagnosis"
             xmlns:design="clr-namespace:Diagnosis.Client.App.DesignData"
             xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance design:SampleTagViewModel, IsDesignTimeCreatable=True}"
             d:DesignHeight="25"
             d:DesignWidth="300">
    <UserControl.Resources>
    </UserControl.Resources>

    <DockPanel>
        <DockPanel.Style>
            <Style TargetType="DockPanel" />
        </DockPanel.Style>

        <StackPanel x:Name="drag"
                    Orientation="Horizontal"
                    DockPanel.Dock="Left"
                    Width="15"
                    Height="20"
                    Cursor="SizeAll"
                    Background="Transparent">
            <StackPanel.Style>
                <Style TargetType="StackPanel">
                    <Setter Property="Visibility"
                            Value="Hidden" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDraggable}"
                                     Value="True">
                            <Setter Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ListBoxItem}}"
                                     Value="True">
                            <Setter Property="Visibility"
                                    Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>
            <StackPanel.Resources>
                <Path x:Key="line"
                      x:Shared="False"
                      Data="M0,0 L0,1"
                      Stretch="Fill"
                      Stroke="Gray"
                      StrokeDashOffset="2"
                      StrokeThickness="2"
                      StrokeDashArray="0,2.5"
                      StrokeDashCap="Round" />
            </StackPanel.Resources>

            <ContentPresenter Content="{StaticResource line}" />
            <ContentPresenter Content="{StaticResource line}"
                              Margin="2,0,0,0" />
        </StackPanel>

        <TextBox x:Name="query"
                 diag:FocusExtension.IsFocused="{Binding IsTextBoxFocused, Mode=TwoWay}"
                 dd:DragDrop.IsDropTarget="{Binding DataContext.IsDropTargetEnabled, RelativeSource={RelativeSource AncestorType=UserControl, AncestorLevel=2} }"
                 dd:DragDrop.DropHandler="{Binding DataContext.DropHandler, RelativeSource={RelativeSource AncestorType=UserControl, AncestorLevel=2} }"
                 Text="{Binding Query, UpdateSourceTrigger=PropertyChanged, NotifyOnTargetUpdated=True}"
                 Focusable="{Binding Focusable}"
                 IsReadOnly="{Binding IsDeleteOnly}">
            <TextBox.Style>
                <Style TargetType="TextBox"
                       BasedOn="{StaticResource {x:Type TextBox}}">
                    <Setter Property="Background"
                            Value="White" />
                    <Setter Property="FontSize"
                            Value="{DynamicResource TagFontSize}" />
                    <Setter Property="FontStyle"
                            Value="Italic" />
                    <!--border on focused /hover only-->
                    <Setter Property="BorderBrush"
                            Value="{x:Null}" />

                    <Style.Triggers>
                        <Trigger Property="Focusable"
                                 Value="False">
                            <Setter Property="Cursor"
                                    Value="Arrow" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Signalization}"
                                     Value="{x:Static diag:Signalizations.NewWord}">
                            <Setter Property="Background"
                                    Value="{StaticResource newWordBrush}" />
                            <Setter Property="ToolTip"
                                    Value="{Binding NewWordToolTip, Source={StaticResource Resources}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Signalization}"
                                     Value="{x:Static diag:Signalizations.Forbidden}">
                            <Setter Property="Background"
                                    Value="{StaticResource forbiddenTagBrush}" />
                            <Setter Property="ToolTip"
                                    Value="Некорректный текст, игнорируется" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Signalization}"
                                     Value="{x:Static diag:Signalizations.PartialMeasure}">
                            <Setter Property="Background"
                                    Value="{StaticResource partialMeasureBrush}" />
                            <Setter Property="ToolTip"
                                    Value="Неизвестная единица измерения, сохраняется без единицы" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding BlankType}"
                                     Value="{x:Static diag:BlankType.Query}">
                            <!--<Setter Property="Foreground"
                                    Value="Red" />-->
                        </DataTrigger>
                        <DataTrigger Binding="{Binding BlankType}"
                                     Value="{x:Static diag:BlankType.Comment}">
                            <Setter Property="FontStyle"
                                    Value="Italic" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding BlankType}"
                                     Value="{x:Static diag:BlankType.Word}">
                            <Setter Property="FontStyle"
                                    Value="Normal" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding BlankType}"
                                     Value="{x:Static diag:BlankType.Icd}">
                            <Setter Property="FontStyle"
                                    Value="Normal" />
                            <Setter Property="Foreground"
                                    Value="Red" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding BlankType}"
                                     Value="{x:Static diag:BlankType.Measure}">
                            <Setter Property="FontStyle"
                                    Value="Normal" />
                            <Setter Property="Foreground"
                                    Value="Green" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Confidence}"
                                     Value="{x:Static diag:Confidence.Absent}">
                            <Setter Property="TextDecorations"
                                    Value="Overline" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBox.Style>
            <TextBox.ContextMenu>
                <ContextMenu>
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem"
                               BasedOn="{StaticResource {x:Type MenuItem}}"
                               x:Key="convert">
                            <Setter Property="IsCheckable"
                                    Value="True" />

                            <Setter Property="Command"
                                    Value="{Binding ConvertToCommand}" />
                            <Setter Property="Visibility"
                                    Value="{Binding ConvertToCommand.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />

                            <Setter Property="IsChecked">
                                <Setter.Value>
                                    <MultiBinding Mode="TwoWay"
                                                  Converter="{StaticResource EqualAllToBool}">
                                        <Binding Path="BlankType" />
                                        <Binding Path="CommandParameter"
                                                 RelativeSource="{RelativeSource Self}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>

                            <Setter Property="diag:MenuItemExtensions.GroupName"
                                    Value="{Binding Hash}" />
                        </Style>
                    </ContextMenu.Resources>
                    <MenuItem InputGestureText="F2"
                              Command="{Binding EditCommand}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem"
                                   BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header"
                                        Value="Выделить" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsListItemFocused}"
                                                 Value="True">
                                        <Setter Property="Header"
                                                Value="Редактировать" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                    <MenuItem Header="Удалить"
                              Style="{StaticResource deleteMenuItem}"
                              InputGestureText=""
                              Command="{Binding DeleteCommand}" />
                    <MenuItem Header="Искать"
                              Visibility="{Binding SendToSearchCommand.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                              Style="{StaticResource searchMenuItem}"
                              Command="{Binding SendToSearchCommand}" />

                    <Separator Visibility="{Binding ConvertToCommand.IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    <MenuItem Header="Ключевое слово"
                              CommandParameter="{x:Static diag:BlankType.Word}"
                              Style="{StaticResource convert}" />
                    <MenuItem Header="Комментарий"
                              CommandParameter="{x:Static diag:BlankType.Comment}"
                              Style="{StaticResource convert}" />
                    <MenuItem Header="МКБ..."
                              Visibility="{Binding CanConvertToIcd, Converter={StaticResource BooleanToVisibilityConverter}}"
                              CommandParameter="{x:Static diag:BlankType.Icd}"
                              Style="{StaticResource convert}" />
                    <MenuItem Header="Измерение..."
                              CommandParameter="{x:Static diag:BlankType.Measure}"
                              Style="{StaticResource convert}" />

                    <Separator />
                    <MenuItem Header="Добавить слева"
                              Command="{Binding AddLeftCommand}" />
                    <MenuItem Header="Добавить справа"
                              Command="{Binding AddRightCommand}" />
                    <Separator />
                    <MenuItem Style="{StaticResource cutMenuItem}" />
                    <MenuItem Style="{StaticResource copyMenuItem}" />
                    <MenuItem Style="{StaticResource pasteMenuItem}" />
                </ContextMenu>
            </TextBox.ContextMenu>
        </TextBox>
    </DockPanel>
</UserControl>